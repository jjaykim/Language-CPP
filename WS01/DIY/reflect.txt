//==============================================
// Name:           Jungjoo Kim
// Student Number: 162 641 195
// Email:          jkim594@myseneca.ca
// Section:        NCC
// Workshop:       Workshop1_DIY_Reflect
//==============================================

	During this workshop, I was very interesting. It was an opportunity to identify the structure of the “String function” by creating own String function, not a “String function” provided by C++. The “strcmp function”, which was interesting while making, needed one variable to store the resulting value because this function is an integer return type. And I used a "flag" to help me terminate the iteration within "while loop" when I found a value that meets the conditions. And I used the ASCII code for the return value. This is because each alphabet, even the '\0' value, has its own ASCII code value. Moreover, I thought “strcpy” and “strcat” functions without return type have similar logic. First of all, I checked whether the string to copy or concatenate has normal values and started working. Since both strings were received as pointer types, I could access each element using "[]", and also, I could change the value directly because I can access each element address value.  Another important point in these functions is that I must store a null value (‘\0’) at the end of the string because the last of the string always contains a null value.

	However, it was difficult to make "strstr function”. So, I made a Pseudo code thinking about what functions and conditions would be needed. First, I initialized the value with "nullptr" by declaring one variable, the type of "const char *", to store the final result value. I conditioned that "while loop" operate until the string of "str1" ends and when the "str1" length is longer than "str2". I also used a "flag" to terminate "while loop". Another "while loop" was used in "while loop", the condition is that the string of "str2" matches continuously in "str1". The reason for this was that I could not ignore the case where "str1" has repeating characters among the characters contained in "str2". if it finds a string that meets all conditions, return the address value that was first met. However, if not, it returns "nullptr".

	At the end of this workshop, I learned that the string always contains a null value at the end and that the string functions run until they meet a null value. I was also able to practice how to use “nullptr” andASCII code values, and how to access address values in an array.
