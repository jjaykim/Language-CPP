//==============================================
// Name:           Jungjoo Kim
// Student Number: 162 641 195
// Email:          jkim594@myseneca.ca
// Section:        NCC
// Workshop:       Workshop4_DIY
//==============================================

      Through this workshop and class, I felt another charm of C++. This time, I was able to learn how to approach and handle objects like object-oriented programming.       Among the things I learned are the constructor and the destructor used during this LAB and DIY workshops. The constructor is called automatically when the object is created. There are several ways to implement a constructor. First, the constructor has no return value, and it can be used by overloading the constructor. Moreover, I can create a constructor that takes the parameters and enters the value into a member variable, or I can set the default values and create a default constructor that enters the default values that I set as soon as the constructor is called. In this LAB workshop, I overloaded the Canister object constructor into 3 cases. Therefore, the initialized value was different depending on the parameter you entered. For example, ÒCanister()Ó, ÒCanister(const char *contentName)Ó or ÒCanister(double height, double diameter, const char *contentName = nullptr)Ó. In addition, the destructor is a function that is automatically called when an object that was created is destroyed. Destroy the constructor that was called and created. However, if there is an object that has a dynamic memory,  it must be deleted before the constructor is destroyed. So that is why I used the destructor to delete a memory. The format of the destructor is similar to that of the constructor, with '~' marks in front of object name like "~Canister()". The destructor has no return value and no parameters.            Also, during this workshop, I learned "this" keyword. The "this" keyword serves as a pointer to the object itself. If the name of the member variable and the name of the parameter are similar, "this" keyword can be used to increase the readability of the code. For example, in a function that receives "name" as a parameter, a member variable named "name" can be used like this Òthis.name = name;Ó. It can also be useful for copying one object to another, or for replicating it with reference. When returning an object, the pointer is used as an operator. For instance, "return *this". If I use the keyword "this", it is good to be able to clearly specify which object I am using. So I used the keyword "this" in the Pour part of this LAB workshop to increase the readability of which object is pouring to another object. For instance, give.m_contentVolume -= (this->capacity() - this->volume()).